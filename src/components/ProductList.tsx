import React, { useState } from 'react';
import { LineChart, Calendar, Info } from 'lucide-react';
import { tradingData } from '../data/tradingData';

const TimeFilter = ({ value, onChange }: { value: string, onChange: (value: string) => void }) => (
  <select 
    value={value} 
    onChange={(e) => onChange(e.target.value)}
    className="bg-green-900/20 border border-green-900/50 text-green-500 rounded px-2 py-1 text-sm"
  >
    <option value="all">All Time</option>
    <option value="daily">Daily</option>
    <option value="weekly">Weekly</option>
    <option value="monthly">Monthly</option>
  </select>
);

const MetricsInfo = () => (
  <div className="relative group">
    <Info className="w-6 h-6 cursor-help text-green-400 hover:text-green-300 transition-colors" />
    <div className="absolute left-0 bottom-full mb-2 hidden group-hover:block w-[400px] bg-black/95 p-4 rounded-lg border border-green-900/50 text-sm z-10 backdrop-blur-sm">
      <h3 className="font-bold text-green-400 mb-3">Trading Metrics Explained</h3>
      <dl className="space-y-2">
        <div>
          <dt className="font-bold text-green-400">Date</dt>
          <dd className="text-green-500/80 ml-2">The specific day the metrics were recorded.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Coins Called</dt>
          <dd className="text-green-500/80 ml-2">The total number of coins called by the AI Degen.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Win &gt;2x</dt>
          <dd className="text-green-500/80 ml-2">The number of coins that achieved gains of 2x or more.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Win &lt;2x</dt>
          <dd className="text-green-500/80 ml-2">The number of coins that gained between 20% and 100%.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Neutral</dt>
          <dd className="text-green-500/80 ml-2">Coins that neither pumped significantly nor dumped immediately.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Dump</dt>
          <dd className="text-green-500/80 ml-2">The number of coins that experienced a significant price drop shortly after being called.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Gains</dt>
          <dd className="text-green-500/80 ml-2">The cumulative profit generated by the coins that achieved gains of 2x or more.</dd>
        </div>
        <div>
          <dt className="font-bold text-green-400">Win Rate</dt>
          <dd className="text-green-500/80 ml-2">The percentage of successful calls, calculated using only the coins that achieved gains of 2x or more.</dd>
        </div>
      </dl>
    </div>
  </div>
);

export const ProductList = () => {
  const [timeFilter, setTimeFilter] = useState('all');
  
  const getFilteredData = () => {
    switch(timeFilter) {
      case 'daily':
        return tradingData.slice(-1);
      case 'weekly':
        return tradingData.slice(-7);
      case 'monthly':
        return tradingData.slice(-30);
      default:
        return tradingData;
    }
  };

  const filteredData = getFilteredData();

  return (
    <div className="mt-6 bg-green-900/20 p-4 rounded-lg border border-green-900/50">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <LineChart className="w-5 h-5" />
            <h2 className="text-green-400 font-bold">Trading Performance History</h2>
          </div>
          <MetricsInfo />
        </div>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <Calendar className="w-4 h-4" />
            <TimeFilter value={timeFilter} onChange={setTimeFilter} />
          </div>
          <div className="text-sm">{filteredData.length} days</div>
        </div>
      </div>
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b border-green-900/50">
              <th className="text-left py-2">Date</th>
              <th className="text-left py-2">Coins Called</th>
              <th className="text-left py-2">Win &gt;2x</th>
              <th className="text-left py-2">Win &lt;2x</th>
              <th className="text-left py-2">Neutral</th>
              <th className="text-left py-2">Dump</th>
              <th className="text-left py-2">Gains</th>
              <th className="text-left py-2">Win Rate</th>
            </tr>
          </thead>
          <tbody>
            {filteredData.map((day, i) => (
              <tr key={i} className="border-b border-green-900/50 last:border-0 hover:bg-green-900/20 transition-colors">
                <td className="py-2">{day.date}</td>
                <td className="py-2">{day.coins}</td>
                <td className="py-2">{day.winX2Plus}</td>
                <td className="py-2">{day.winX2Less}</td>
                <td className="py-2">{day.neutral}</td>
                <td className="py-2">{day.dump}</td>
                <td className="py-2">{day.gains}</td>
                <td className="py-2">{day.winRate}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};